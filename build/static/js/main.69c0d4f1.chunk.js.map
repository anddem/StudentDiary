{"version":3,"sources":["panels/PHolder.js","panels/DateTime.js","panels/SheduleForToday.js","panels/Home.js","panels/GeneralList.js","panels/Day.js","panels/Week.js","panels/Form.js","App.js","index.js"],"names":["PHolder","stretched","icon","header","today","Date","getDay","year","getFullYear","month","getMonth","getTime","now","Math","round","getWeekNumber","SheduleForToday","db","useState","shedule","setShedule","readTransaction","t","executeSql","day","week","success","length","list","Object","keys","map","num","key","multiline","level","item","subject","weight","time","notes","Today","rows","error","transaction","createNewTable","PHome","id","Home","activePanel","GeneralList","entries","removeList","removeCell","note","index","removable","onRemove","slice","DeleteNote","remove","teacher","CheckShedule","sheduleList","changeList","daysID","days","Days","go","weekDays","onClick","data-to","Day","left","Main","Week","setActivePanel","e","currentTarget","dataset","to","info","len","a","i","tx","result","CheckAndSave","document","getElementById","checked","push","checkDay","value","UpdateOrSave","values","children","forEach","WeekSelect","top","placeholder","setWeek","weeks","status","onChange","DaysSelect","TimeSelect","startTimes","setTime","RequiredFields","setSubject","OptionalFields","FLayout","mode","size","Form","TBarItem","story","text","selected","data-story","TBar","CEpic","activeStory","tabbar","App","window","openDatabase","setActiveStory","bridge","send","ReactDOM","render"],"mappings":"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","file":"static/js/main.69c0d4f1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport Placeholder from '@vkontakte/vkui/dist/components/Placeholder/Placeholder'\r\nimport Icon56FaceIdOutline from '@vkontakte/icons/dist/56/face_id_outline';\r\n\r\nconst PHolder = () => { //Плейсхолдер для экранов без занятий\r\n    return (\r\n    <Placeholder stretched icon={<Icon56FaceIdOutline/>} header='Сегодня занятий нет, либо расписание не заполнено'>\r\n        Добавить занятия можно на третьей вкладке\r\n    </Placeholder>\r\n    )\r\n}\r\n\r\nexport default PHolder","const Week =  ['Dоскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\r\n\r\nfunction getWeekNumber() {\r\n    let year = new Date().getFullYear();\r\n    let month = new Date().getMonth();\r\n    let today = new Date(year, month, 0).getTime();\r\n    let now = new Date().getTime();\r\n    \r\n    let week = Math.round((now - today) / (1000 * 60 * 60 * 24 * 7));\r\n    return ((week % 2) ? 'Первая' : 'Вторая')\r\n}\r\n\r\nconst today = {\r\n    'day': Week[new Date().getDay()],\r\n    'week': getWeekNumber()\r\n}\r\n\r\nexport default today;","import React, {useState} from 'react';\r\nimport List from '@vkontakte/vkui/dist/components/List/List';\r\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\r\n\r\nimport PHolder from './PHolder' //Плейсхолдер\r\nimport today from './DateTime' //Получение текущего дня и номера недели\r\nimport { Title, Headline, Text } from '@vkontakte/vkui';\r\n\r\nconst Today = shedule => { //Функция, формирующая расписание на главном экране\r\n    if (shedule.length) { //Если в ответе на запрос есть записи\r\n        const list = Object.keys(shedule).map(num =>\r\n            <Cell key={num} multiline>\r\n                <Title level='1'>{shedule.item(num).subject}</Title>\r\n                <Headline weight='semibold'>{shedule.item(num).time}</Headline>\r\n                {shedule.item(num).notes ? <Text>{shedule.item(num).notes}</Text> : null}\r\n            </Cell>\r\n        )\r\n        return (<List>{list}</List>) //Возвращается в одном элементе List\r\n    }\r\n    return (<PHolder/>) //Иначе возвращается плейсхолдер\r\n}\r\n\r\nconst createNewTable = (db) => { //создание новой таблицы БД\r\n    db.transaction( //Транзакция на запись\r\n        t => {\r\n            t.executeSql(\"CREATE TABLE shedule (subject TEXT, day TEXT, week TEXT, time TEXT, teacher TEXT, notes TEXT)\") //SQL запрос на создание таблицы с необходимыми столбцами\r\n        }\r\n    )\r\n}\r\n\r\nconst SheduleForToday = ({db}) => {\r\n    const [shedule, setShedule] = useState(null); //Элемент с расписанием, по умолчанию null\r\n    db.readTransaction( //начало транзакции на чтение\r\n        t => { //Функция транзакции\r\n            t.executeSql( //Выполнить SQL запрос к БД на устройстве\r\n                'SELECT * FROM shedule WHERE day = ? AND (week = ? OR week = \"Обе\") ORDER BY time', [today.day, today.week], //Запрос, подстановки вместо знаков вопроса\r\n                (t, success) => {//Функция, вызываемая при успешном запросе\r\n                    if (shedule === null) {\r\n                        setShedule(Today(success.rows))\r\n                    }\r\n                },\r\n                error => { //Функция, вызываемая при ошибке (обычно один раз при первом запуске приложения на устройстве)\r\n                    createNewTable(db); //Таблица создаётся\r\n                    setShedule(<PHolder/>) //Выводится плейсхолдер\r\n                }\r\n            )\r\n        }\r\n    )\r\n    return (shedule) //Возврат полученного react-элемента\r\n}\r\n\r\nexport default SheduleForToday","import React from 'react';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\r\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\r\n\r\nimport SheduleForToday from './SheduleForToday'\r\n\r\nconst PHome = ({id, db}) => {\r\n  return (\r\n    <Panel id={id}>\r\n      <PanelHeader>\r\n          Дневник студента\r\n      </PanelHeader>\r\n      <SheduleForToday db={db}/>\r\n    </Panel>\r\n  )\r\n}\r\n\r\nconst Home = ({id, db}) => { //Главная страница приложения\r\n    return (\r\n        <View id={id} activePanel='home'>\r\n            <PHome id='home' db={db}/>\r\n        </View>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","import React, {useState} from 'react'\r\nimport {List, Cell} from '@vkontakte/vkui'\r\nimport {Title, Text, Caption} from '@vkontakte/vkui'\r\nimport PHolder from './PHolder'\r\n\r\nconst DeleteNote = (db, note) => { //Удаление записи из БД\r\n    db.transaction( //Транзакция на запись\r\n        t => {\r\n            t.executeSql('DELETE FROM shedule WHERE subject = ? and day = ? and week = ? and time = ?', //SQL запрос на удаление\r\n            [note.subject, note.day, note.week, note.time]) //Подстановки вместо знаков вопроса\r\n        }\r\n    )\r\n}\r\n\r\nconst GeneralList = ({db, shedule}) => {\r\n    const [removeList, removeCell] = useState(Object.entries(shedule.rows))\r\n\r\n    const remove = (note, index) => { //Функция при нажатии на удаление занятия\r\n        removeCell([...removeList.slice(0, index), ...removeList.slice(index + 1)]) //Запись удаляется из рендера\r\n        DeleteNote(db, note[1]) //Запись удаляется из БД\r\n    }\r\n\r\n    if (shedule.rows.length) { //Если в результате запроса есть записи\r\n        const list = removeList.map((note, index) => //Генерируется список элеметов Cell с информацией\r\n        <Cell key={note} multiline removable onRemove={() => remove(note, index)}>\r\n            <Title level='1'>{note[1].subject} </Title>\r\n            <Caption level='1' weight='semibold'>{note[1].time} | {note[1].week === 'Обе' ? `${note[1].week} недели` : `${note[1].week} неделя`} </Caption>\r\n            {note[1].teacher ? <Text>{note[1].teacher}</Text> : null}\r\n            {note[1].notes ? <Text>{note[1].notes}</Text> : null}\r\n        </Cell>)\r\n\r\n        return <List>{list}</List> //И далее возвращается для рендера в элементе List\r\n    }\r\n    else {\r\n        return (<PHolder/>) //Иначе рендерится плейсхолдер\r\n    }\r\n}\r\n\r\nconst CheckShedule = ({db, day}) => { //Функция проверки расписания на выбранный день недели\r\n    const [sheduleList, changeList] = useState(null)\r\n    db.readTransaction(\r\n        t => {\r\n            t.executeSql(\r\n                'SELECT * FROM shedule WHERE day = ? ORDER BY time', [day], //sql Запрос к БД для получения всех записей на выбранный день\r\n                (t, success) => {\r\n                    if (sheduleList === null) {\r\n                        changeList(<GeneralList db={db} shedule={success}/>) //Оформление полученного результата\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    )\r\n    return (sheduleList)\r\n}\r\n\r\nexport default CheckShedule","import React from 'react'\r\nimport {Panel, PanelHeader, PanelHeaderBack, Group, CellButton} from '@vkontakte/vkui'\r\n\r\nimport CheckShedule from './GeneralList'\r\n\r\nconst daysID = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\r\nconst days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\r\n\r\nexport const Days = ({go}) => { //Генерируемый список кнопок-ссылок на каждый день\r\n    const weekDays = days.map((day, index) => \r\n    <CellButton\r\n        key={daysID[index]}\r\n        onClick={go}\r\n        data-to={daysID[index]}>\r\n        {day}\r\n    </CellButton>\r\n    );\r\n\r\n    return (\r\n        <Group>\r\n            {weekDays}\r\n        </Group>\r\n    );\r\n}\r\nexport const Day = ({id, day, go, db}) => { //Шаблон панели с информацией о расписании на день\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader left={<PanelHeaderBack onClick={go} data-to='main'/>}>\r\n                {day}\r\n            </PanelHeader>\r\n            <CheckShedule db={db} day={day}/>\r\n        </Panel>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport {View, Panel, PanelHeader} from '@vkontakte/vkui'\r\n\r\nimport {Days, Day} from './Day'\r\n\r\nconst Main = ({id, go}) => { //Панель с общим списком дней\r\n    return(\r\n    <Panel id={id}>\r\n        <PanelHeader>\r\n            Расписание\r\n        </PanelHeader>\r\n        \r\n        <Days go={go}/>\r\n    </Panel>\r\n    )\r\n}\r\n\r\nconst Week = ({id, db}) => { //Панели для второй вкладки -- общий список дней и панель с каждыйм из них подробнее\r\n    const [activePanel, setActivePanel] = useState('main');\r\n\r\n    const go = e => {\r\n        setActivePanel(e.currentTarget.dataset.to)\r\n    }\r\n\r\n    return (\r\n        <View id={id} activePanel={activePanel}>\r\n            <Main id='main' go={go}/> \r\n            <Day id='monday' day='Понедельник' go={go} db={db}/>\r\n            <Day id='tuesday' day='Вторник' go={go} db={db}/>\r\n            <Day id='wednesday' day='Среда' go={go} db={db}/>\r\n            <Day id='thursday' day='Четверг' go={go} db={db}/>\r\n            <Day id='friday' day='Пятница' go={go} db={db}/>\r\n            <Day id='saturday' day='Суббота' go={go} db={db}/>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default Week","import React, { useState } from 'react';\r\nimport {View, Panel, PanelHeader} from '@vkontakte/vkui'\r\nimport {FormLayout, Select, Button, Input, FormLayoutGroup, Checkbox, Textarea} from '@vkontakte/vkui'\r\n\r\nconst checkDay = () => { //Проверка checkbox элементов с выбором дня\r\n    const days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'] //Исходный массив\r\n    const result = [] //Массив с выбранными днями пополняется\r\n    days.map((day, index) => document.getElementById(`day-${index}`).checked ? result.push(day) : null)\r\n    return result\r\n}\r\n\r\nasync function UpdateOrSave(db, info, len) { //Функция записи информации в БД\r\n    db.transaction( //Транзакция на запись\r\n        t=>{\r\n            for (let i = 0; i < len; i++) { //len -- количество дней, выбранных пользователем в форме\r\n                t.executeSql('SELECT * FROM shedule WHERE subject = ? and day = ? and week = ? and time = ?', [info[0], info[1][i], ...info.slice(2, 4)], //Запрос к БД\r\n                (tx, result) => {\r\n                    if (result.rows.length) { //Если на предыдущий запрос есть записи\r\n                        tx.executeSql('UPDATE shedule SET teacher = ?, notes = ? WHERE subject = ? and day = ? and week = ? and time = ?', //Обновляем поля, которые могли измениться\r\n                                        [...info.slice(4), info[0], info[1][i], ...info.slice(2, 4)]\r\n                        )\r\n                    }\r\n                    else { //Иначе вносим новую запись в БД\r\n                        tx.executeSql('INSERT INTO shedule values(?, ?, ?, ?, ?, ?)', [info[0], info[1][i], ...info.slice(2)])\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst clearForm = () => { //Очистка формы\r\n    //Поэлементно ставятся значения \"\" и false на соответствующие поля формы\r\n    document.getElementById('weekSelect').value = ''\r\n\r\n    const days = Object.values(document.getElementById('daysSelect').children)\r\n    days.forEach(item => Object.values(item.children)[0].checked = false)\r\n\r\n    document.getElementById('timeSelect').value = ''\r\n    document.getElementById('subject').value = ''\r\n    document.getElementById('teacher').value = ''\r\n    document.getElementById('notes').value = ''\r\n}\r\n\r\nconst CheckAndSave = ({db}) => { //Проверка заполненных полей\r\n    const days = checkDay() //Массив выбранных дней\r\n    const week = document.getElementById('weekSelect').value //Выбранная неделя\r\n    const time = document.getElementById('timeSelect').value //Выбранное время\r\n    const subject = document.getElementById('subject').value //Введённый предмет\r\n\r\n    if( week && days.length !== 0 && time && subject) { //Если все необходимые поля заполнены\r\n        const teacher = document.getElementById('teacher').value ? document.getElementById('teacher').value : null\r\n        const notes = document.getElementById('notes').value ? document.getElementById('notes').value : null \r\n\r\n        let arr = [subject, days, week, time, teacher, notes] //Общий массив с информацией\r\n        UpdateOrSave(db, arr, days.length); //Функция записи информации в БД\r\n\r\n        clearForm() //Очистка формы после записи\r\n    }\r\n}\r\n\r\nconst WeekSelect = ({id, top, placeholder}) => { //Компонент выбора недели (список)\r\n    const [week, setWeek] = useState('')\r\n    const weeks = ['Первая', 'Вторая', 'Обе']\r\n\r\n    return (\r\n        <Select id={id} top={top} placeholder={placeholder} value={week} status={week ? 'valid' : 'error'} onChange={(e) => setWeek(e.currentTarget.value)}>\r\n            {Object.keys(weeks).map(week => <option key={week} value={weeks[week]}>{weeks[week]}</option>)}\r\n        </Select>\r\n    )\r\n}\r\n\r\nconst DaysSelect = ({id, top}) => { //Компонент выбора дней недели (лист чекбокс элементов)\r\n    const week = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота']\r\n    \r\n    return (\r\n        <FormLayoutGroup  id={id} top={top}>\r\n            {Object.keys(week).map(day =><Checkbox id={`day-${day}`} key={day} value={week[day]}>{week[day]}</Checkbox>)}\r\n        </FormLayoutGroup>\r\n    )\r\n}\r\n\r\nconst TimeSelect = ({id, top, placeholder}) => { //Компонент выбора времени (список)\r\n    const startTimes = ['08:00', '09:40', '11:30', '13:20', '15:00', '16:40']\r\n    const [time, setTime] = useState('')\r\n\r\n    return (\r\n        <Select id={id} top={top} placeholder={placeholder} value={time} status={time ? 'valid' : 'error'} onChange={(e) => setTime(e.currentTarget.value)}>\r\n            {Object.keys(startTimes).map(time => <option key={time} value={startTimes[time]}>{startTimes[time]}</option>)}\r\n        </Select>\r\n    )\r\n}\r\n\r\nconst RequiredFields = ({top}) => { //Компонент рендера обязательных к заполнению полей\r\n    const [subject, setSubject] = useState('')\r\n\r\n    return (\r\n        <FormLayout top={top}>\r\n            <WeekSelect id='weekSelect' top='Неделя' placeholder='Выберите неделю'/>\r\n            <DaysSelect id='daysSelect'top='Дни недели'/>\r\n            <TimeSelect id=\"timeSelect\" top='Время начала занятия' placeholder='Выберите время начала занятия'/>\r\n            <Input id='subject' top='Предмет' value={subject} status={subject ? 'valid' : 'error'} onChange={e => setSubject(e.currentTarget.value)}/>\r\n        </FormLayout>\r\n    )\r\n}\r\n\r\nconst OptionalFields = (top) => { //Компонент рендера необязательных полей\r\n    return (\r\n        <FormLayout top={top}>\r\n            <Input id='teacher' top='Имя преподавателя'/>\r\n            <Textarea id='notes' top='Заметки' placeholder='Например, номер аудитории или ДЗ на следующее занятие'/>\r\n        </FormLayout>\r\n    )\r\n}\r\n\r\nconst FLayout = ({db}) => { //Компонент рендера полей формы добавления занятия\r\n    return (\r\n        <FormLayout>\r\n            <RequiredFields top='Обязательные поля'/>\r\n            <OptionalFields top='Опциональные поля'/>\r\n\r\n            <Button mode='commerce' size='xl' onClick={() => CheckAndSave({db})}> \r\n                Сохранить изменения\r\n            </Button>\r\n        </FormLayout>\r\n    )\r\n}\r\n\r\nconst Form = ({id, db}) => { //Компонент рендера панели с формой\r\n    return (\r\n        <View id={id} activePanel='addPair'>\r\n            <Panel id='addPair'>\r\n                <PanelHeader>Добавить занятие</PanelHeader>\r\n                <FLayout db={db}/>\r\n            </Panel>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport Epic from '@vkontakte/vkui/dist/components/Epic/Epic';\r\nimport Tabbar from '@vkontakte/vkui/dist/components/Tabbar/Tabbar'\r\nimport TabbarItem from '@vkontakte/vkui/dist/components/TabbarItem/TabbarItem'\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nimport Icon36HomeOutline from '@vkontakte/icons/dist/36/home_outline';\r\nimport Icon36Article from '@vkontakte/icons/dist/36/article';\r\nimport Icon36Add from '@vkontakte/icons/dist/36/add';\r\n\r\nimport Home from './panels/Home';\r\nimport Week from './panels/Week';\r\nimport Form from './panels/Form';\r\n\r\nconst TBarItem = ({onClick, story, text, selected, icon}) => { //Шаблон элемента нижнего меню\r\n\treturn (\r\n\t\t<TabbarItem onClick={onClick} selected={selected === story}\tdata-story={story} text={text}>\r\n\t\t\t\t{icon}\r\n\t\t</TabbarItem>\r\n\t)\r\n}\r\n\r\nconst TBar = ({onClick, selected}) => { //Нижнее меню\r\n\treturn (\r\n\t<Tabbar>\r\n\t\t<TBarItem story='today' text='Сегодня' onClick={onClick} selected={selected} icon={<Icon36HomeOutline/>}/>\r\n\t\t<TBarItem story='week' text='Неделя' onClick={onClick} selected={selected} icon={<Icon36Article/>}/>\r\n\t\t<TBarItem story='form' text='Добавить занятие' onClick={onClick} selected={selected} icon={<Icon36Add/>}/>\r\n\t</Tabbar>\r\n\t)\r\n}\r\n\r\nconst CEpic = ({activeStory, onClick, db}) =>\r\n\t<Epic activeStory={activeStory} tabbar={<TBar selected={activeStory} onClick={onClick}/>}>\r\n\t\t<Home id='today' db={db}/>\r\n\t\t<Week id='week' db={db}/>\r\n\t\t<Form id='form' db={db}/>\r\n\t</Epic>\r\n\r\nconst App = () => { //Основа приложения\r\n\tconst db = window.openDatabase('studentdiaryshedule', '1.0', 'Database for shedule in student diary.', 1*1024*1024); //База данных WebSQL\r\n\tconst [activeStory, setActiveStory] = useState('today'); //id элемента, который необходимо рендерить в данный момент\r\n\r\n\tconst onStoryChange = e => {\r\n\t\tsetActiveStory(e.currentTarget.dataset.story)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<CEpic activeStory={activeStory} onClick={onStoryChange} db={db}/>\r\n\t);\r\n}\r\n\r\nexport default App;","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}